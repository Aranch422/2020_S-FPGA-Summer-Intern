-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=121,HLS_SYN_LUT=184,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_105_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_204 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln5_fu_119_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln5_reg_209 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln4_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_129_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_218 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln7_fu_135_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_reg_223 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln5_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_reg_228 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_fu_155_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_236 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln6_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_load_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal b_load_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln7_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln7_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_reg_66 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_reg_77 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_0_reg_88 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln7_1_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_3_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_5_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_111_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_fu_139_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_2_fu_161_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln7_1_fu_165_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_175_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_4_fu_183_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln7_2_fu_187_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_66 <= i_reg_204;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_66 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_77 <= j_reg_218;
            elsif (((icmp_ln4_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_77 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_88 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_0_reg_88 <= k_reg_236;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                a_load_reg_251 <= a_q0;
                b_load_reg_256 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                c_addr_reg_228 <= zext_ln7_1_fu_144_p1(2 - 1 downto 0);
                    zext_ln7_reg_223(1 downto 0) <= zext_ln7_fu_135_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_204 <= i_fu_105_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_218 <= j_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_236 <= k_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln7_reg_261 <= mul_ln7_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln5_reg_209(2 downto 1) <= zext_ln5_fu_119_p1(2 downto 1);
            end if;
        end if;
    end process;
    zext_ln5_reg_209(0) <= '0';
    zext_ln5_reg_209(3) <= '0';
    zext_ln7_reg_223(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln4_fu_99_p2, ap_CS_fsm_state3, icmp_ln5_fu_123_p2, ap_CS_fsm_state4, icmp_ln6_fu_149_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln4_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln5_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln6_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    a_address0 <= zext_ln7_3_fu_170_p1(2 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln7_1_fu_165_p2 <= std_logic_vector(unsigned(zext_ln7_2_fu_161_p1) + unsigned(zext_ln5_reg_209));
    add_ln7_2_fu_187_p2 <= std_logic_vector(unsigned(zext_ln7_reg_223) + unsigned(zext_ln7_4_fu_183_p1));
    add_ln7_fu_139_p2 <= std_logic_vector(unsigned(zext_ln5_reg_209) + unsigned(zext_ln7_fu_135_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln4_fu_99_p2)
    begin
        if (((icmp_ln4_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln4_fu_99_p2)
    begin
        if (((icmp_ln4_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= zext_ln7_5_fu_192_p1(2 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= c_addr_reg_228;

    c_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_d0 <= mul_ln7_reg_261;

    c_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_105_p2 <= std_logic_vector(unsigned(i_0_reg_66) + unsigned(ap_const_lv2_1));
    icmp_ln4_fu_99_p2 <= "1" when (i_0_reg_66 = ap_const_lv2_2) else "0";
    icmp_ln5_fu_123_p2 <= "1" when (j_0_reg_77 = ap_const_lv2_2) else "0";
    icmp_ln6_fu_149_p2 <= "1" when (k_0_reg_88 = ap_const_lv2_2) else "0";
    j_fu_129_p2 <= std_logic_vector(unsigned(j_0_reg_77) + unsigned(ap_const_lv2_1));
    k_fu_155_p2 <= std_logic_vector(unsigned(k_0_reg_88) + unsigned(ap_const_lv2_1));
    mul_ln7_fu_197_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_load_reg_251) * signed(b_load_reg_256))), 32));
    tmp_1_fu_175_p3 <= (k_0_reg_88 & ap_const_lv1_0);
    tmp_fu_111_p3 <= (i_0_reg_66 & ap_const_lv1_0);
    zext_ln5_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_111_p3),4));
    zext_ln7_1_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_fu_139_p2),64));
    zext_ln7_2_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_88),4));
    zext_ln7_3_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_1_fu_165_p2),64));
    zext_ln7_4_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_175_p3),4));
    zext_ln7_5_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_2_fu_187_p2),64));
    zext_ln7_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_77),4));
end behav;
