// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=112,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=699,HLS_SYN_LUT=861,HLS_VERSION=2019_2}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_1_address0,
        in_1_ce0,
        in_1_q0,
        in_2_address0,
        in_2_ce0,
        in_2_q0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state14 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] in_1_address0;
output   in_1_ce0;
input  [31:0] in_1_q0;
output  [6:0] in_2_address0;
output   in_2_ce0;
input  [31:0] in_2_q0;
output  [6:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [31:0] output_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_1_ce0;
reg in_2_ce0;
reg output_1_ce0;
reg output_1_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] i_0_reg_89;
wire   [0:0] icmp_ln3_fu_108_p2;
reg   [0:0] icmp_ln3_reg_126;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln3_reg_126_pp0_iter1_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter2_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter3_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter4_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter5_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter6_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter7_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter8_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter9_reg;
reg   [0:0] icmp_ln3_reg_126_pp0_iter10_reg;
wire   [6:0] i_fu_114_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln7_fu_120_p1;
reg   [63:0] zext_ln7_reg_135;
reg   [63:0] zext_ln7_reg_135_pp0_iter1_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter2_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter3_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter4_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter5_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter6_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter7_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter8_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter9_reg;
reg   [63:0] zext_ln7_reg_135_pp0_iter10_reg;
reg   [31:0] reg_in_1_reg_150;
reg   [31:0] reg_in_1_reg_150_pp0_iter2_reg;
reg   [31:0] reg_in_1_reg_150_pp0_iter3_reg;
reg   [31:0] reg_in_1_reg_150_pp0_iter4_reg;
reg   [31:0] reg_in_1_reg_150_pp0_iter5_reg;
reg   [31:0] reg_in_2_reg_156;
wire   [31:0] grp_fu_104_p2;
reg   [31:0] reg_buff_reg_161;
wire   [31:0] grp_fu_100_p2;
reg   [31:0] reg_output_reg_166;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state14;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
end

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_buff_reg_161),
    .din1(reg_in_1_reg_150_pp0_iter5_reg),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_in_1_reg_150),
    .din1(reg_in_2_reg_156),
    .ce(1'b1),
    .dout(grp_fu_104_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln3_fu_108_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_89 <= i_fu_114_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_89 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln3_reg_126 <= icmp_ln3_fu_108_p2;
        icmp_ln3_reg_126_pp0_iter1_reg <= icmp_ln3_reg_126;
        zext_ln7_reg_135_pp0_iter1_reg[6 : 0] <= zext_ln7_reg_135[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln3_reg_126_pp0_iter10_reg <= icmp_ln3_reg_126_pp0_iter9_reg;
        icmp_ln3_reg_126_pp0_iter2_reg <= icmp_ln3_reg_126_pp0_iter1_reg;
        icmp_ln3_reg_126_pp0_iter3_reg <= icmp_ln3_reg_126_pp0_iter2_reg;
        icmp_ln3_reg_126_pp0_iter4_reg <= icmp_ln3_reg_126_pp0_iter3_reg;
        icmp_ln3_reg_126_pp0_iter5_reg <= icmp_ln3_reg_126_pp0_iter4_reg;
        icmp_ln3_reg_126_pp0_iter6_reg <= icmp_ln3_reg_126_pp0_iter5_reg;
        icmp_ln3_reg_126_pp0_iter7_reg <= icmp_ln3_reg_126_pp0_iter6_reg;
        icmp_ln3_reg_126_pp0_iter8_reg <= icmp_ln3_reg_126_pp0_iter7_reg;
        icmp_ln3_reg_126_pp0_iter9_reg <= icmp_ln3_reg_126_pp0_iter8_reg;
        reg_in_1_reg_150_pp0_iter2_reg <= reg_in_1_reg_150;
        reg_in_1_reg_150_pp0_iter3_reg <= reg_in_1_reg_150_pp0_iter2_reg;
        reg_in_1_reg_150_pp0_iter4_reg <= reg_in_1_reg_150_pp0_iter3_reg;
        reg_in_1_reg_150_pp0_iter5_reg <= reg_in_1_reg_150_pp0_iter4_reg;
        zext_ln7_reg_135_pp0_iter10_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter9_reg[6 : 0];
        zext_ln7_reg_135_pp0_iter2_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter1_reg[6 : 0];
        zext_ln7_reg_135_pp0_iter3_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter2_reg[6 : 0];
        zext_ln7_reg_135_pp0_iter4_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter3_reg[6 : 0];
        zext_ln7_reg_135_pp0_iter5_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter4_reg[6 : 0];
        zext_ln7_reg_135_pp0_iter6_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter5_reg[6 : 0];
        zext_ln7_reg_135_pp0_iter7_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter6_reg[6 : 0];
        zext_ln7_reg_135_pp0_iter8_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter7_reg[6 : 0];
        zext_ln7_reg_135_pp0_iter9_reg[6 : 0] <= zext_ln7_reg_135_pp0_iter8_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3_reg_126_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reg_buff_reg_161 <= grp_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln3_reg_126 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_in_1_reg_150 <= in_1_q0;
        reg_in_2_reg_156 <= in_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3_reg_126_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reg_output_reg_166 <= grp_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln3_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln7_reg_135[6 : 0] <= zext_ln7_fu_120_p1[6 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln3_fu_108_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_1_ce0 = 1'b1;
    end else begin
        in_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_2_ce0 = 1'b1;
    end else begin
        in_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln3_reg_126_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln3_fu_108_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter11 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln3_fu_108_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_114_p2 = (i_0_reg_89 + 7'd1);

assign icmp_ln3_fu_108_p2 = ((i_0_reg_89 == 7'd100) ? 1'b1 : 1'b0);

assign in_1_address0 = zext_ln7_fu_120_p1;

assign in_2_address0 = zext_ln7_fu_120_p1;

assign output_1_address0 = zext_ln7_reg_135_pp0_iter10_reg;

assign output_1_d0 = reg_output_reg_166;

assign zext_ln7_fu_120_p1 = i_0_reg_89;

always @ (posedge ap_clk) begin
    zext_ln7_reg_135[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter4_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter5_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter6_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter7_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter8_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter9_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_135_pp0_iter10_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //top
