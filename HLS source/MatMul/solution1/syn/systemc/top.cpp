// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> top::ap_ST_fsm_state1 = "1";
const sc_lv<3> top::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> top::ap_ST_fsm_state14 = "100";
const sc_lv<32> top::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool top::ap_const_boolean_1 = true;
const sc_lv<32> top::ap_const_lv32_1 = "1";
const bool top::ap_const_boolean_0 = false;
const sc_lv<1> top::ap_const_lv1_0 = "0";
const sc_lv<1> top::ap_const_lv1_1 = "1";
const sc_lv<7> top::ap_const_lv7_0 = "0000000";
const sc_lv<7> top::ap_const_lv7_64 = "1100100";
const sc_lv<7> top::ap_const_lv7_1 = "1";
const sc_lv<32> top::ap_const_lv32_2 = "10";

top::top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    top_fadd_32ns_32nbkb_U1 = new top_fadd_32ns_32nbkb<1,5,32,32,32>("top_fadd_32ns_32nbkb_U1");
    top_fadd_32ns_32nbkb_U1->clk(ap_clk);
    top_fadd_32ns_32nbkb_U1->reset(ap_rst);
    top_fadd_32ns_32nbkb_U1->din0(reg_buff_reg_161);
    top_fadd_32ns_32nbkb_U1->din1(reg_in_1_reg_150_pp0_iter5_reg);
    top_fadd_32ns_32nbkb_U1->ce(ap_var_for_const0);
    top_fadd_32ns_32nbkb_U1->dout(grp_fu_100_p2);
    top_fmul_32ns_32ncud_U2 = new top_fmul_32ns_32ncud<1,4,32,32,32>("top_fmul_32ns_32ncud_U2");
    top_fmul_32ns_32ncud_U2->clk(ap_clk);
    top_fmul_32ns_32ncud_U2->reset(ap_rst);
    top_fmul_32ns_32ncud_U2->din0(reg_in_1_reg_150);
    top_fmul_32ns_32ncud_U2->din1(reg_in_2_reg_156);
    top_fmul_32ns_32ncud_U2->ce(ap_var_for_const0);
    top_fmul_32ns_32ncud_U2->dout(grp_fu_104_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter8);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter9);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter10);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter11);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter7);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln3_fu_108_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_i_fu_114_p2);
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_icmp_ln3_fu_108_p2);
    sensitive << ( i_0_reg_89 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln7_fu_120_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_in_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln7_fu_120_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_in_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_output_1_address0);
    sensitive << ( zext_ln7_reg_135_pp0_iter10_reg );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_output_1_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter11 );

    SC_METHOD(thread_output_1_d0);
    sensitive << ( reg_output_reg_166 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_output_1_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln3_reg_126_pp0_iter10_reg );
    sensitive << ( ap_enable_reg_pp0_iter11 );

    SC_METHOD(thread_zext_ln7_fu_120_p1);
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln3_fu_108_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter10 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter11 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_1_address0, "(port)in_1_address0");
    sc_trace(mVcdFile, in_1_ce0, "(port)in_1_ce0");
    sc_trace(mVcdFile, in_1_q0, "(port)in_1_q0");
    sc_trace(mVcdFile, in_2_address0, "(port)in_2_address0");
    sc_trace(mVcdFile, in_2_ce0, "(port)in_2_ce0");
    sc_trace(mVcdFile, in_2_q0, "(port)in_2_q0");
    sc_trace(mVcdFile, output_1_address0, "(port)output_1_address0");
    sc_trace(mVcdFile, output_1_ce0, "(port)output_1_ce0");
    sc_trace(mVcdFile, output_1_we0, "(port)output_1_we0");
    sc_trace(mVcdFile, output_1_d0, "(port)output_1_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_0_reg_89, "i_0_reg_89");
    sc_trace(mVcdFile, icmp_ln3_fu_108_p2, "icmp_ln3_fu_108_p2");
    sc_trace(mVcdFile, icmp_ln3_reg_126, "icmp_ln3_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter7, "ap_block_state9_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter8, "ap_block_state10_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter9, "ap_block_state11_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter10, "ap_block_state12_pp0_stage0_iter10");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter11, "ap_block_state13_pp0_stage0_iter11");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter1_reg, "icmp_ln3_reg_126_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter2_reg, "icmp_ln3_reg_126_pp0_iter2_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter3_reg, "icmp_ln3_reg_126_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter4_reg, "icmp_ln3_reg_126_pp0_iter4_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter5_reg, "icmp_ln3_reg_126_pp0_iter5_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter6_reg, "icmp_ln3_reg_126_pp0_iter6_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter7_reg, "icmp_ln3_reg_126_pp0_iter7_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter8_reg, "icmp_ln3_reg_126_pp0_iter8_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter9_reg, "icmp_ln3_reg_126_pp0_iter9_reg");
    sc_trace(mVcdFile, icmp_ln3_reg_126_pp0_iter10_reg, "icmp_ln3_reg_126_pp0_iter10_reg");
    sc_trace(mVcdFile, i_fu_114_p2, "i_fu_114_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, zext_ln7_fu_120_p1, "zext_ln7_fu_120_p1");
    sc_trace(mVcdFile, zext_ln7_reg_135, "zext_ln7_reg_135");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter1_reg, "zext_ln7_reg_135_pp0_iter1_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter2_reg, "zext_ln7_reg_135_pp0_iter2_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter3_reg, "zext_ln7_reg_135_pp0_iter3_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter4_reg, "zext_ln7_reg_135_pp0_iter4_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter5_reg, "zext_ln7_reg_135_pp0_iter5_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter6_reg, "zext_ln7_reg_135_pp0_iter6_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter7_reg, "zext_ln7_reg_135_pp0_iter7_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter8_reg, "zext_ln7_reg_135_pp0_iter8_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter9_reg, "zext_ln7_reg_135_pp0_iter9_reg");
    sc_trace(mVcdFile, zext_ln7_reg_135_pp0_iter10_reg, "zext_ln7_reg_135_pp0_iter10_reg");
    sc_trace(mVcdFile, reg_in_1_reg_150, "reg_in_1_reg_150");
    sc_trace(mVcdFile, reg_in_1_reg_150_pp0_iter2_reg, "reg_in_1_reg_150_pp0_iter2_reg");
    sc_trace(mVcdFile, reg_in_1_reg_150_pp0_iter3_reg, "reg_in_1_reg_150_pp0_iter3_reg");
    sc_trace(mVcdFile, reg_in_1_reg_150_pp0_iter4_reg, "reg_in_1_reg_150_pp0_iter4_reg");
    sc_trace(mVcdFile, reg_in_1_reg_150_pp0_iter5_reg, "reg_in_1_reg_150_pp0_iter5_reg");
    sc_trace(mVcdFile, reg_in_2_reg_156, "reg_in_2_reg_156");
    sc_trace(mVcdFile, grp_fu_104_p2, "grp_fu_104_p2");
    sc_trace(mVcdFile, reg_buff_reg_161, "reg_buff_reg_161");
    sc_trace(mVcdFile, grp_fu_100_p2, "grp_fu_100_p2");
    sc_trace(mVcdFile, reg_output_reg_166, "reg_output_reg_166");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter10, "ap_enable_reg_pp0_iter10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter11, "ap_enable_reg_pp0_iter11");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("top.hdltvin.dat");
    mHdltvoutHandle.open("top.hdltvout.dat");
}

top::~top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete top_fadd_32ns_32nbkb_U1;
    delete top_fmul_32ns_32ncud_U2;
}

void top::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter10 = ap_enable_reg_pp0_iter9.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter11 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter11 = ap_enable_reg_pp0_iter10.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter11 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln3_fu_108_p2.read(), ap_const_lv1_0))) {
        i_0_reg_89 = i_fu_114_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_89 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln3_reg_126 = icmp_ln3_fu_108_p2.read();
        icmp_ln3_reg_126_pp0_iter1_reg = icmp_ln3_reg_126.read();
        zext_ln7_reg_135_pp0_iter1_reg = zext_ln7_reg_135.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln3_reg_126_pp0_iter10_reg = icmp_ln3_reg_126_pp0_iter9_reg.read();
        icmp_ln3_reg_126_pp0_iter2_reg = icmp_ln3_reg_126_pp0_iter1_reg.read();
        icmp_ln3_reg_126_pp0_iter3_reg = icmp_ln3_reg_126_pp0_iter2_reg.read();
        icmp_ln3_reg_126_pp0_iter4_reg = icmp_ln3_reg_126_pp0_iter3_reg.read();
        icmp_ln3_reg_126_pp0_iter5_reg = icmp_ln3_reg_126_pp0_iter4_reg.read();
        icmp_ln3_reg_126_pp0_iter6_reg = icmp_ln3_reg_126_pp0_iter5_reg.read();
        icmp_ln3_reg_126_pp0_iter7_reg = icmp_ln3_reg_126_pp0_iter6_reg.read();
        icmp_ln3_reg_126_pp0_iter8_reg = icmp_ln3_reg_126_pp0_iter7_reg.read();
        icmp_ln3_reg_126_pp0_iter9_reg = icmp_ln3_reg_126_pp0_iter8_reg.read();
        reg_in_1_reg_150_pp0_iter2_reg = reg_in_1_reg_150.read();
        reg_in_1_reg_150_pp0_iter3_reg = reg_in_1_reg_150_pp0_iter2_reg.read();
        reg_in_1_reg_150_pp0_iter4_reg = reg_in_1_reg_150_pp0_iter3_reg.read();
        reg_in_1_reg_150_pp0_iter5_reg = reg_in_1_reg_150_pp0_iter4_reg.read();
        zext_ln7_reg_135_pp0_iter10_reg = zext_ln7_reg_135_pp0_iter9_reg.read();
        zext_ln7_reg_135_pp0_iter2_reg = zext_ln7_reg_135_pp0_iter1_reg.read();
        zext_ln7_reg_135_pp0_iter3_reg = zext_ln7_reg_135_pp0_iter2_reg.read();
        zext_ln7_reg_135_pp0_iter4_reg = zext_ln7_reg_135_pp0_iter3_reg.read();
        zext_ln7_reg_135_pp0_iter5_reg = zext_ln7_reg_135_pp0_iter4_reg.read();
        zext_ln7_reg_135_pp0_iter6_reg = zext_ln7_reg_135_pp0_iter5_reg.read();
        zext_ln7_reg_135_pp0_iter7_reg = zext_ln7_reg_135_pp0_iter6_reg.read();
        zext_ln7_reg_135_pp0_iter8_reg = zext_ln7_reg_135_pp0_iter7_reg.read();
        zext_ln7_reg_135_pp0_iter9_reg = zext_ln7_reg_135_pp0_iter8_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln3_reg_126_pp0_iter4_reg.read(), ap_const_lv1_0))) {
        reg_buff_reg_161 = grp_fu_104_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln3_reg_126.read(), ap_const_lv1_0))) {
        reg_in_1_reg_150 = in_1_q0.read();
        reg_in_2_reg_156 = in_2_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln3_reg_126_pp0_iter9_reg.read(), ap_const_lv1_0))) {
        reg_output_reg_166 = grp_fu_100_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln3_fu_108_p2.read(), ap_const_lv1_0))) {
        zext_ln7_reg_135 = zext_ln7_fu_120_p1.read();
    }
}

void top::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void top::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void top::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[2];
}

void top::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state10_pp0_stage0_iter8() {
    ap_block_state10_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state11_pp0_stage0_iter9() {
    ap_block_state11_pp0_stage0_iter9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state12_pp0_stage0_iter10() {
    ap_block_state12_pp0_stage0_iter10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state13_pp0_stage0_iter11() {
    ap_block_state13_pp0_stage0_iter11 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_block_state9_pp0_stage0_iter7() {
    ap_block_state9_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void top::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln3_fu_108_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void top::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void top::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void top::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void top::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void top::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void top::thread_i_fu_114_p2() {
    i_fu_114_p2 = (!i_0_reg_89.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_89.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void top::thread_icmp_ln3_fu_108_p2() {
    icmp_ln3_fu_108_p2 = (!i_0_reg_89.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_89.read() == ap_const_lv7_64);
}

void top::thread_in_1_address0() {
    in_1_address0 =  (sc_lv<7>) (zext_ln7_fu_120_p1.read());
}

void top::thread_in_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        in_1_ce0 = ap_const_logic_1;
    } else {
        in_1_ce0 = ap_const_logic_0;
    }
}

void top::thread_in_2_address0() {
    in_2_address0 =  (sc_lv<7>) (zext_ln7_fu_120_p1.read());
}

void top::thread_in_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        in_2_ce0 = ap_const_logic_1;
    } else {
        in_2_ce0 = ap_const_logic_0;
    }
}

void top::thread_output_1_address0() {
    output_1_address0 =  (sc_lv<7>) (zext_ln7_reg_135_pp0_iter10_reg.read());
}

void top::thread_output_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()))) {
        output_1_ce0 = ap_const_logic_1;
    } else {
        output_1_ce0 = ap_const_logic_0;
    }
}

void top::thread_output_1_d0() {
    output_1_d0 = reg_output_reg_166.read();
}

void top::thread_output_1_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(icmp_ln3_reg_126_pp0_iter10_reg.read(), ap_const_lv1_0))) {
        output_1_we0 = ap_const_logic_1;
    } else {
        output_1_we0 = ap_const_logic_0;
    }
}

void top::thread_zext_ln7_fu_120_p1() {
    zext_ln7_fu_120_p1 = esl_zext<64,7>(i_0_reg_89.read());
}

void top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter10.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln3_fu_108_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter10.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln3_fu_108_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_1_address0\" :  \"" << in_1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_1_ce0\" :  \"" << in_1_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_1_q0\" :  \"" << in_1_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_2_address0\" :  \"" << in_2_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_2_ce0\" :  \"" << in_2_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_2_q0\" :  \"" << in_2_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_1_address0\" :  \"" << output_1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_1_ce0\" :  \"" << output_1_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_1_we0\" :  \"" << output_1_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_1_d0\" :  \"" << output_1_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

