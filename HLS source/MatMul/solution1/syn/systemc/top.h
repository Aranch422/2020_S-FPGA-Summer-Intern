// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _top_HH_
#define _top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "top_fadd_32ns_32nbkb.h"
#include "top_fmul_32ns_32ncud.h"

namespace ap_rtl {

struct top : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > in_1_address0;
    sc_out< sc_logic > in_1_ce0;
    sc_in< sc_lv<32> > in_1_q0;
    sc_out< sc_lv<7> > in_2_address0;
    sc_out< sc_logic > in_2_ce0;
    sc_in< sc_lv<32> > in_2_q0;
    sc_out< sc_lv<7> > output_1_address0;
    sc_out< sc_logic > output_1_ce0;
    sc_out< sc_logic > output_1_we0;
    sc_out< sc_lv<32> > output_1_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    top(sc_module_name name);
    SC_HAS_PROCESS(top);

    ~top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    top_fadd_32ns_32nbkb<1,5,32,32,32>* top_fadd_32ns_32nbkb_U1;
    top_fmul_32ns_32ncud<1,4,32,32,32>* top_fmul_32ns_32ncud_U2;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_0_reg_89;
    sc_signal< sc_lv<1> > icmp_ln3_fu_108_p2;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter11;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter6_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter7_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter8_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter9_reg;
    sc_signal< sc_lv<1> > icmp_ln3_reg_126_pp0_iter10_reg;
    sc_signal< sc_lv<7> > i_fu_114_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln7_fu_120_p1;
    sc_signal< sc_lv<64> > zext_ln7_reg_135;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter1_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter2_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter3_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter4_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter5_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter6_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter7_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter8_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter9_reg;
    sc_signal< sc_lv<64> > zext_ln7_reg_135_pp0_iter10_reg;
    sc_signal< sc_lv<32> > reg_in_1_reg_150;
    sc_signal< sc_lv<32> > reg_in_1_reg_150_pp0_iter2_reg;
    sc_signal< sc_lv<32> > reg_in_1_reg_150_pp0_iter3_reg;
    sc_signal< sc_lv<32> > reg_in_1_reg_150_pp0_iter4_reg;
    sc_signal< sc_lv<32> > reg_in_1_reg_150_pp0_iter5_reg;
    sc_signal< sc_lv<32> > reg_in_2_reg_156;
    sc_signal< sc_lv<32> > grp_fu_104_p2;
    sc_signal< sc_lv<32> > reg_buff_reg_161;
    sc_signal< sc_lv<32> > grp_fu_100_p2;
    sc_signal< sc_lv<32> > reg_output_reg_166;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter11;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state12_pp0_stage0_iter10();
    void thread_ap_block_state13_pp0_stage0_iter11();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_fu_114_p2();
    void thread_icmp_ln3_fu_108_p2();
    void thread_in_1_address0();
    void thread_in_1_ce0();
    void thread_in_2_address0();
    void thread_in_2_ce0();
    void thread_output_1_address0();
    void thread_output_1_ce0();
    void thread_output_1_d0();
    void thread_output_1_we0();
    void thread_zext_ln7_fu_120_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
